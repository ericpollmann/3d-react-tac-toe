import { createClient } from '@supabase/supabase-js';

// Get Supabase configuration from environment variables
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || '';
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || '';

// Check if Supabase is configured
export const isSupabaseConfigured = !!(supabaseUrl && supabaseAnonKey);

// Create Supabase client only if configured
export const supabase = isSupabaseConfigured 
  ? createClient(supabaseUrl, supabaseAnonKey)
  : null as any;

// Check if using demo instance
export const isDemoMode = false;

export interface GlobalScore {
  id?: string;
  player_name: string;
  wins: number;
  least_moves_win: number | null;
  most_moves_win: number | null;
  created_at?: string;
  updated_at?: string;
}

export interface GlobalGameRecord {
  id?: string;
  player_name: string;
  winner: 'X' | 'O' | 'draw';
  move_count: number;
  created_at?: string;
}

// Initialize the scores table if it doesn't exist
export async function initializeDatabase() {
  if (!isSupabaseConfigured) {
    return false;
  }
  
  try {
    // Try to fetch from table to check if it exists
    const { error } = await supabase
      .from('global_scores')
      .select('*')
      .limit(1);
    
    if (error) {
      console.warn('Global scoreboard not available:', error.message);
      return false;
    }
    
    return true;
  } catch (err) {
    console.warn('Global scoreboard not available');
    return false;
  }
}

export async function getTopScores(limit: number = 10) {
  try {
    const { data, error } = await supabase
      .from('global_scores')
      .select('*')
      .order('wins', { ascending: false })
      .limit(limit);
    
    if (error) {
      console.error('Error fetching scores:', error);
      return [];
    }
    
    return data || [];
  } catch (err) {
    console.error('Error fetching scores:', err);
    return [];
  }
}

export async function submitScore(playerName: string, wins: number, leastMoves: number | null, mostMoves: number | null) {
  try {
    // Check if player already exists
    const { data: existing } = await supabase
      .from('global_scores')
      .select('*')
      .eq('player_name', playerName)
      .single();
    
    if (existing) {
      // Update existing record
      const { error } = await supabase
        .from('global_scores')
        .update({
          wins,
          least_moves_win: leastMoves,
          most_moves_win: mostMoves,
          updated_at: new Date().toISOString()
        })
        .eq('player_name', playerName);
        
      if (error) {
        console.error('Error updating score:', error);
        return false;
      }
    } else {
      // Create new record
      const { error } = await supabase
        .from('global_scores')
        .insert({
          player_name: playerName,
          wins,
          least_moves_win: leastMoves,
          most_moves_win: mostMoves
        });
        
      if (error) {
        console.error('Error creating score:', error);
        return false;
      }
    }
    
    return true;
  } catch (err) {
    console.error('Error submitting score:', err);
    return false;
  }
}

// Get recent games from all players
export async function getRecentGames(limit: number = 5) {
  try {
    const { data, error } = await supabase
      .from('game_records')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(limit);
    
    if (error) {
      console.error('Error fetching recent games:', error);
      return [];
    }
    
    return data || [];
  } catch (err) {
    console.error('Error fetching recent games:', err);
    return [];
  }
}

// Get games with least/most moves (wins only)
export async function getGameRecords() {
  try {
    const { data, error } = await supabase
      .from('game_records')
      .select('*')
      .neq('winner', 'draw')
      .order('move_count', { ascending: true });
    
    if (error) {
      console.error('Error fetching game records:', error);
      return { leastMoves: null, mostMoves: null };
    }
    
    if (!data || data.length === 0) {
      return { leastMoves: null, mostMoves: null };
    }
    
    // First item has least moves, last item has most moves
    return {
      leastMoves: data[0],
      mostMoves: data[data.length - 1]
    };
  } catch (err) {
    console.error('Error fetching game records:', err);
    return { leastMoves: null, mostMoves: null };
  }
}

// Submit a game record
export async function submitGameRecord(
  playerName: string,
  winner: 'X' | 'O' | 'draw',
  moveCount: number
) {
  console.log('submitGameRecord called with:', { playerName, winner, moveCount });
  
  try {
    const { data, error } = await supabase
      .from('game_records')
      .insert({
        player_name: playerName,
        winner,
        move_count: moveCount
      })
      .select();
    
    if (error) {
      console.error('Error submitting game record:', error);
      console.error('Error details:', error.message, error.details, error.hint);
      return false;
    }
    
    console.log('Game record submitted successfully:', data);
    return true;
  } catch (err) {
    console.error('Error submitting game record:', err);
    return false;
  }
}