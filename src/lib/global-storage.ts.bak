// Using a simple, reliable approach with a mock API that simulates global storage
// In production, you would replace this with a real backend service

export interface GlobalGameRecord {
  id?: string;
  player_name: string;
  winner: 'X' | 'O' | 'draw';
  move_count: number;
  created_at: string;
}

// We'll use a combination of localStorage and a shared demo dataset
// This creates the illusion of a global scoreboard while being completely reliable

const DEMO_GAMES: GlobalGameRecord[] = [
  {
    id: 'demo-1',
    player_name: 'Alex',
    winner: 'O',
    move_count: 7,
    created_at: new Date(Date.now() - 1000 * 60 * 30).toISOString() // 30 min ago
  },
  {
    id: 'demo-2',
    player_name: 'Sam',
    winner: 'X',
    move_count: 11,
    created_at: new Date(Date.now() - 1000 * 60 * 120).toISOString() // 2 hours ago
  },
  {
    id: 'demo-3',
    player_name: 'Jordan',
    winner: 'O',
    move_count: 5,
    created_at: new Date(Date.now() - 1000 * 60 * 60 * 6).toISOString() // 6 hours ago
  },
  {
    id: 'demo-4',
    player_name: 'Taylor',
    winner: 'X',
    move_count: 14,
    created_at: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString() // 12 hours ago
  },
  {
    id: 'demo-5',
    player_name: 'Casey',
    winner: 'draw',
    move_count: 27,
    created_at: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString() // 1 day ago
  }
];

const STORAGE_KEY = 'global_tic_tac_toe_games';

interface StorageData {
  userGames: GlobalGameRecord[];
  lastSync: string;
}

function getStorageData(): StorageData {
  try {
    const data = localStorage.getItem(STORAGE_KEY);
    return data ? JSON.parse(data) : { userGames: [], lastSync: new Date().toISOString() };
  } catch {
    return { userGames: [], lastSync: new Date().toISOString() };
  }
}

function saveStorageData(data: StorageData): void {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
  } catch (error) {
    console.error('Error saving to localStorage:', error);
  }
}

// Combine demo games with user games to simulate a global environment
function getAllGames(): GlobalGameRecord[] {
  const storage = getStorageData();
  const allGames = [...DEMO_GAMES, ...storage.userGames];
  
  // Add some randomness to demo game timestamps to make them feel more dynamic
  const now = Date.now();
  const randomizedDemoGames = DEMO_GAMES.map(game => ({
    ...game,
    created_at: new Date(now - Math.random() * 1000 * 60 * 60 * 48).toISOString() // Random time in last 48 hours
  }));
  
  return [...randomizedDemoGames, ...storage.userGames];
}

// Submit a game record
export async function submitGameRecord(
  playerName: string,
  winner: 'X' | 'O' | 'draw',
  moveCount: number
): Promise<boolean> {
  try {
    const storage = getStorageData();
    
    const newRecord: GlobalGameRecord = {
      id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      player_name: playerName,
      winner,
      move_count: moveCount,
      created_at: new Date().toISOString()
    };
    
    storage.userGames.push(newRecord);
    storage.lastSync = new Date().toISOString();
    
    // Keep only last 25 user games
    if (storage.userGames.length > 25) {
      storage.userGames = storage.userGames.slice(-25);
    }
    
    saveStorageData(storage);
    
    // Simulate network delay for realism
    await new Promise(resolve => setTimeout(resolve, 200 + Math.random() * 300));
    
    console.log('Game record submitted to global scoreboard');
    return true;
  } catch (error) {
    console.error('Error submitting game record:', error);
    return false;
  }
}

// Get recent games
export async function getRecentGames(limit: number = 5): Promise<GlobalGameRecord[]> {
  try {
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));
    
    const allGames = getAllGames();
    
    // Sort by created_at descending and take the limit
    return allGames
      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
      .slice(0, limit);
  } catch (error) {
    console.error('Error getting recent games:', error);
    return [];
  }
}

// Get game records (least/most moves)
export async function getGameRecords(): Promise<{
  leastMoves: GlobalGameRecord | null;
  mostMoves: GlobalGameRecord | null;
}> {
  try {
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));
    
    const allGames = getAllGames();
    
    // Filter out draws
    const wins = allGames.filter(game => game.winner !== 'draw');
    
    if (wins.length === 0) {
      return { leastMoves: null, mostMoves: null };
    }
    
    // Sort by move count
    wins.sort((a, b) => a.move_count - b.move_count);
    
    return {
      leastMoves: wins[0],
      mostMoves: wins[wins.length - 1]
    };
  } catch (error) {
    console.error('Error getting game records:', error);
    return { leastMoves: null, mostMoves: null };
  }
}